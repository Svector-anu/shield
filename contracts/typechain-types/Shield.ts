/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ShieldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPolicy"
      | "isPolicyValid"
      | "logAttempt"
      | "policies"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PolicyCreated" | "VerificationAttempt"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logAttempt",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "policies", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logAttempt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
}

export namespace PolicyCreatedEvent {
  export type InputTuple = [
    policyId: BytesLike,
    sender: AddressLike,
    expiry: BigNumberish,
    maxAttempts: BigNumberish
  ];
  export type OutputTuple = [
    policyId: string,
    sender: string,
    expiry: bigint,
    maxAttempts: bigint
  ];
  export interface OutputObject {
    policyId: string;
    sender: string;
    expiry: bigint;
    maxAttempts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationAttemptEvent {
  export type InputTuple = [policyId: BytesLike, success: boolean];
  export type OutputTuple = [policyId: string, success: boolean];
  export interface OutputObject {
    policyId: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Shield extends BaseContract {
  connect(runner?: ContractRunner | null): Shield;
  waitForDeployment(): Promise<this>;

  interface: ShieldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPolicy: TypedContractMethod<
    [policyId: BytesLike, expiry: BigNumberish, maxAttempts: BigNumberish],
    [void],
    "nonpayable"
  >;

  isPolicyValid: TypedContractMethod<[policyId: BytesLike], [boolean], "view">;

  logAttempt: TypedContractMethod<
    [policyId: BytesLike, success: boolean],
    [void],
    "nonpayable"
  >;

  policies: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, boolean] & {
        sender: string;
        expiry: bigint;
        maxAttempts: bigint;
        attempts: bigint;
        valid: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [policyId: BytesLike, expiry: BigNumberish, maxAttempts: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPolicyValid"
  ): TypedContractMethod<[policyId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "logAttempt"
  ): TypedContractMethod<
    [policyId: BytesLike, success: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, boolean] & {
        sender: string;
        expiry: bigint;
        maxAttempts: bigint;
        attempts: bigint;
        valid: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PolicyCreated"
  ): TypedContractEvent<
    PolicyCreatedEvent.InputTuple,
    PolicyCreatedEvent.OutputTuple,
    PolicyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationAttempt"
  ): TypedContractEvent<
    VerificationAttemptEvent.InputTuple,
    VerificationAttemptEvent.OutputTuple,
    VerificationAttemptEvent.OutputObject
  >;

  filters: {
    "PolicyCreated(bytes32,address,uint256,uint256)": TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;
    PolicyCreated: TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;

    "VerificationAttempt(bytes32,bool)": TypedContractEvent<
      VerificationAttemptEvent.InputTuple,
      VerificationAttemptEvent.OutputTuple,
      VerificationAttemptEvent.OutputObject
    >;
    VerificationAttempt: TypedContractEvent<
      VerificationAttemptEvent.InputTuple,
      VerificationAttemptEvent.OutputTuple,
      VerificationAttemptEvent.OutputObject
    >;
  };
}
